/*
MyISAM 存储引擎
    特性和用途
        1、表级锁定：MyISAM使用表级锁定，这意味着当一个表正在被读或写时，其他会话不能同时写这个表。
        2、存储结构：每个MyISAM表在磁盘上存储为三个文件：
        (1).frm 文件：表结构定义文件。
        (2).MYD 文件：数据文件，存储表中的实际数据。
        (3).MYI 文件：索引文件，存储表的索引信息。
        (4).sdi 文件：在MySQL 8.0版本中引入，存储数据字典信息（Serialized Dictionary Information），用于支持数
            据字典的快速恢复和管理。
        3、不支持事务：MyISAM不支持事务，这意味着它不提供原子性、一致性、隔离性和持久性（ACID）保障。
        4、全文索引：MyISAM支持全文索引，这使它在快速文本搜索方面表现优异。
        5、适用场景：适用于读多写少、需要快速读性能的应用，比如日志系统或数据仓库。
*/
-- 举例说明
-- 假设我们有一个MyISAM存储引擎的表 logs，用于存储系统日志：
CREATE TABLE logs (
    log_id INT AUTO_INCREMENT,
    log_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (log_id),
    FULLTEXT (log_message)
) ENGINE=MyISAM;
/*
    读性能：在查询日志时，MyISAM的读取速度很快，因为它支持全文索引。
    锁定机制：当一个用户在插入一条日志时，其他用户的写操作会被阻塞，直到插入完成。
*/

/*
Memory 存储引擎
    特性和用途
        1、数据存储在内存中：Memory存储引擎（也称为HEAP存储引擎）将数据存储在内存中，这使得读写速度非常快。
        2、表级锁定：同样使用表级锁定。
        3、临时数据：适用于存储临时数据或需要快速访问的数据，因为服务器重启时数据会丢失（不持久化）。
        4、适用场景：适用于会话数据、缓存数据或其他需要快速访问的临时数据。
*/
-- 举例说明
-- 假设我们有一个Memory存储引擎的表 session_data，用于存储用户会话数据：
CREATE TABLE session_data (
    session_id VARCHAR(100) PRIMARY KEY,
    user_id INT,
    data TEXT,
    last_accessed TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=Memory;
/*
    快速读写：由于数据存储在内存中，Memory表的读写速度非常快。
    数据易失性：如果服务器重启，所有存储在 session_data 表中的数据将会丢失。
*/

/*
InnoDB 存储引擎
    特性和用途
        1、行级锁定：InnoDB使用行级锁定，这使得并发性能较高，不同事务可以同时操作不同的行。
        2、存储结构：InnoDB表的数据和索引存储在同一个.ibd文件中，或者在共享表空间文件 ibdata1 中。
        3、支持事务：InnoDB完全支持ACID特性，提供事务处理能力。
        4、外键支持：InnoDB支持外键，能够维护数据的完整性。
        5、适用场景：适用于需要高并发、事务处理和数据完整性的应用，比如在线交易系统。
*/
-- 举例说明
-- 假设我们有一个InnoDB存储引擎的表 orders，用于存储订单信息：
CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT,
    name VARCHAR(100),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (customer_id)
) ENGINE=InnoDB;

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT,
    customer_id INT,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50),
    PRIMARY KEY (order_id),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
) ENGINE=InnoDB;
/*
    事务处理：在插入订单记录时，可以使用事务确保数据的一致性。
    行级锁定：不同用户可以同时对不同的订单进行更新而不会相互阻塞。
*/

/*
三者对比：
    特性/存储引擎                     MyISAM                          Memory	                    InnoDB
    锁定机制	                        表级锁定	                        表级锁定	                    行级锁定
    事务支持	                        不支持	                        不支持	                    完全支持
    存储位置	              磁盘（.MYD、.MYI文件）	                    内存	            磁盘（.ibd文件或共享表空间）
    数据持久性	                    持久化	                非持久化，服务器重启数据丢失	            持久化
    外键支持	                        不支持	                        不支持	                    支持
    适用场景	            读多写少、快速读访问、日志系统	        临时数据、会话数据、缓存	      高并发、事务处理、数据完整性

适用场景总结
    1、MyISAM：适用于需要快速读取的数据和不需要事务处理的场景，比如日志记录或数据仓库。
    2、Memory：适用于需要快速访问但数据不需要持久化的场景，比如会话数据和临时缓存。
    3、InnoDB：适用于需要高并发访问、事务处理和数据完整性的场景，比如在线交易系统和复杂的业务应用。
*/

/*
MyISAM 存储引擎
    比喻和特点
        1、比喻
        想象你有一个非常大的图书馆（数据库），书籍（数据）都放在书架上，索引卡片（索引）也放在书架上。每次你要找一本
    书，你要先找到对应的索引卡片，然后根据卡片信息找到书。但是当有人在整理书架或添加新书的时候，其他人就不能再动这些书了。
        2、特点
        (1)读写锁定：当有人在读书或添加新书时，其他人暂时不能动这些书。
        (2)数据存储在磁盘上：书是放在书架上的，适合长期保存。
        (3)不支持事务：没有账本记录每次借书还书的详细过程。
        (4)适合读多写少：如果大部分时间是借书而不是还书或添加新书，那么这种方式非常高效。
        3、日常生活中的例子
        (1)图书馆管理：在图书馆，借书的人很多，还书的人很少，所以MyISAM适用于这种读多写少的场景。
        (2)日志系统：记录日志时，主要是查询日志，而不是频繁地修改日志。

Memory 存储引擎
    比喻和特点
        1、比喻
        想象你有一个白板（内存），你可以在上面写很多东西（数据）。这些内容非常容易获取（读取速度快），但如果白板
    被擦掉（服务器重启），所有内容都会消失。
        2、特点
        (1)数据存储在内存中：白板上的内容更容易写和读（非常快）。
        (2)数据易失性：当你擦掉白板或断电时，所有数据都会丢失。
        (3)适合临时数据：非常适合存储临时数据，比如临时笔记或会话信息。
        3、日常生活中的例子
        (1)课堂笔记：老师在白板上写下课堂笔记，学生可以快速参考这些笔记，但下课后白板上的内容会被擦掉。
        (2)购物车数据：在电商平台上，用户的购物车数据临时存储在内存中，操作非常快，但会话结束后数据会被清空。

InnoDB 存储引擎
    比喻和特点
        1、比喻
            想象你有一个银行保险箱（数据库），每个保险箱（行）都有独立的锁（行级锁定）。你可以同时操作不同的保险箱而不
        互相干扰。每次你存钱或取钱（事务），都会记录在案，保证每笔操作的安全和完整性。
        2、特点
        (1)事务支持：每次存取款（操作）都会记录，数据安全可靠。
        (2)行级锁定：可以同时操作不同的行，不会相互干扰。
        (3)数据持久性：数据存储在磁盘上，不会因为断电或重启丢失。
        3、日常生活中的例子
        (1)银行交易：每个用户的账户可以独立操作，不互相影响，每笔交易都记录在案，确保数据一致。
        (2)在线购物系统：用户下单购买商品时，系统会同时更新库存和订单信息，确保数据一致性和完整性。
*/
