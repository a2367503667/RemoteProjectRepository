#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

// 本节无代码
/*
		STL叫标准模板库，它的作用就是使得我们的代码更加有通用性，是泛型编程
	能够大大提高的可重复使用性，提高我们的开发效率

	STL的广义定义：由容器、算法、迭代器、仿函数、适配器和空间配置器六大部件组成，它
				   最重要的特点就是让数据结构和算法分离

	容器：属于一种class template
	算法：就是我们常用的算法如：排序、搜索等
	迭代器：用于将类模板和算法的结合使用，也就是迭代器提供某一种形式，使得算法可
			以访问容器里面的数据，对容器里面的数据进行处理
	仿函数：是算法实现的一种策略，就好比如你需要在类模板中使用一个算法，但是又想用户
			使用得更加便捷，此时可以重载()运算符，就可以使用对象+()直接调用算法
	适配器：用于修饰容器、仿函数或迭代器接口，就好比如适配函数的参数个数，原来只能传2个
			我们可以通过适配器让函数参数传递多个
	空间配置器：负责空间的分配和回收，它实现了动态空间分配，空间管理和空间释放的工作

*/

/*
	三大组件：容器、算法和迭代器

	1、容器：序列式容器和关联式容器
		(1)序列式容器是一种按照元素在容器中的顺序存储和访问元素的容器，常见的有vector容器
		deque容器、list容器、stack容器和queue容器
		
		(2)关联式容器是一种按照键值对存储和访问元素的容器，其中元素是按照键值进行排序，常
		见的有set/multiset容器和map/multimap容器

	2、算法：质变算法和非质变算法
		(1)质变算法就是会根本性改变数据的算法，就好比如：排序、修改和删除的相关算法
		(2)非质变算法就是不会改变数据的算法，就好比如：查找、遍历和求极值等相关算法

	3、迭代器：输入迭代器、输出迭代器、前向迭代器、双向迭代器和随机访问迭代器
		(1)输入迭代器支持++操作，但只用于只读访问(“输入”类似于输入到stdout文件的意思)
		(2)输出迭代器支持++操作，但只用于只写访问(“输出”类似于输出到stdin文件的意思)
		(3)前向迭代器支持++操作，不支持--操作，它只能单向移动，但可以对数据进行读写操作
		(4)双向迭代器支持++和--操作，能够双向移动，支持数据读写操作
		(5)随机访问迭代器支持++、--和+n的操作，也就是说不仅能双向移动，并且可以一次移动
		   多位，还支持数据的读写操作

*/

int main()
{


	return 0;
}
