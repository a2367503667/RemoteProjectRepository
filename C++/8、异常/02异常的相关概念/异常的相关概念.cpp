#define _CRT_SECURE_NO_WARNINGS
#include<iostream>

/*
	异常：在所有支持异常处理的编程语言(如：Java)中，要认识到的一个思想就是在异常处理过程中，由于
	问题检测代码可以抛出一个对象给问题处理代码，通过这个对象的类型和内容，实际上完成了两个部分的
	通信，通信的内容就是"出现了什么错误"。当然，各种语言对异常的具体实现有不同的处理方式，但是这个
	通信的思想是不变的(简单来说，异常就是一种思想，是运行程序时我们没有得到的预期结果或者程序运行
	错误后得到的错误信息的标记，就好比如在C语言中，如果得到错误的信息，我们会返回-1，这个-1就是我们
	得到的错误信息的标记)

	异常处理就是处理程序中的错误(这个错误不一定是程序运行的错误，有可能是我们自定义不想得到预期的
	结果的错误，自定义的错误结果这里不讨论)，是指在程序运行过程中发生一些异常事件(如："数组下标越界"
	"除数为0"、"数据溢出"、"所要读取的文件不存在"、"空指针"、"内存不足"等等)

	我们回顾一下C语言的异常处理方式：

	1、当我们遇到程序错误时，我们一般会用0表示返回成功，返回-1表示出错；

	2、我们先定义一个全局变量ERROR，初始化值为0，当遇到程序错误时，我们就可以将这个值赋值为-1，
	   同样我们也返回当前结果到主调函数中，先对ERROR进行判断，如果这个值为-1，则就显示异常信息即可

	但是这里会有个缺陷，那就是无论怎么样，我们都返回了一个错误的值到主调函数中，这样的话我们很难去
	判断这个值是不是我们所需的有效值(有可能-1也是我们需要的值)，即使第2点很好地规避了返回后的值是错
	误就直接进入异常处理，但是ERROR的值也很容易进行误操作修改成我们异常标记值(如我们误操作了ERROR
	为-1，此时不管程序返回值有没有错误都会报出异常)


	因此，对于C++而言就不用这种处理异常的方式
*/

/*
	这里就是C语言中处理异常的方法：
	
	1、一般都会用 0、 1 或 -1去表示一些错误信息，但是0、 1 或 -1本身就没有代表的含义，我们没办法区分
	   这些值是不是我们所得的有用信息；

	2、返回值也只能一次返回一个值，这样我们就很难得到更多的错误信息，也不能对异常进行详细地处理；

	3、返回值也可以被忽略，那如果被忽略之后，同样会继续执行下面的代码，这样有可能因为这个错误从而
	   导致后面的代码出现连锁反应有各种各样的bug

	   如下：
	   函数printArray()的返回值被忽略了，其下面的代码仍然可以执行
	   void func01()
	   {
		   int len = 10;
		   int arr[10]{ 0 };
		   printArray(arr, len);
		   ...
	   }

	C++可以解决以上的问题
*/
int printArray(int* arr, int len)
{
	if (arr == nullptr)
	{
		return -1;
	}
	if (len == 0)
	{
		return 1;
	}
	return 0;
}

int main()
{
	


	return 0;
}
